{
	"openapi": "3.1.0",
	"info": {
		"version": "1.0.0",
		"title": "Streamify API",
		"summary": "Users and streams manager.",
		"description": "Server for managing users and streams."
	},
	"basePath": "/",
	"paths": {
		"/users": {
			"get": {
				"tags": ["User"],
				"summary": "List all users",
				"description": "Retrieve a list of all users, optionally filtering for those who are 'live'.",
				"parameters": [
					{
						"name": "live",
						"in": "query",
						"required": false,
						"description": "Filter for users who are currently live",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful retrieval of user list",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/User"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": ["User"],
				"summary": "Create a new user",
				"description": "Create a new user with the provided username, email, and password.",
				"requestBody": {
					"description": "User data",
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"$ref": "#/components/schemas/UserInput"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "User created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"400": {
						"description": "Invalid input",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/users/{username}": {
			"get": {
				"tags": ["User"],
				"summary": "Get user by username",
				"description": "Retrieve a user by their username.",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful retrieval of user",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["User"],
				"summary": "Delete a user",
				"description": "Delete a user by their username.",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "User deleted successfully"
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/users/{id}": {
			"put": {
				"tags": ["User"],
				"summary": "Update user",
				"description": "Update a user's details including their username, email, and optionally the profile picture.",
				"operationId": "updateUser",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "The ID of the user to update",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "User data to update",
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"username": {
										"type": "string"
									},
									"email": {
										"type": "string"
									},
									"picture": {
										"type": "string",
										"format": "binary",
										"description": "Upload user profile picture"
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "User updated successfully"
					},
					"400": {
						"description": "Bad Request due to invalid input or missing required fields"
					},
					"404": {
						"description": "User not found"
					}
				}
			}
		},
		"/users/live/{id}": {
			"patch": {
				"tags": ["User"],
				"summary": "Update user's live status",
				"description": "Updates the user's live status, toggling their availability for streaming.",
				"operationId": "updateUserLiveStatus",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "The ID of the user to update the live status",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Live status data",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"live": {
										"type": "boolean",
										"description": "True to set user as live, false to set as not live"
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "Live status updated successfully"
					},
					"400": {
						"description": "Bad Request due to invalid input or missing required fields"
					},
					"404": {
						"description": "User not found"
					}
				}
			}
		},

		"/login": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Authenticate user",
				"description": "Authenticates a user using local strategy and redirects based on the outcome.",
				"requestBody": {
					"description": "User login credentials",
					"required": true,
					"content": {
						"application/x-www-form-urlencoded": {
							"schema": {
								"type": "object",
								"properties": {
									"username": {
										"type": "string",
										"description": "User's username"
									},
									"password": {
										"type": "string",
										"description": "User's password"
									}
								},
								"required": ["username", "password"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Login successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "OK"
										},
										"message": {
											"type": "string",
											"example": "Login successful"
										}
									}
								}
							}
						}
					},
					"302": {
						"description": "Redirect to profile page on failure",
						"headers": {
							"Location": {
								"description": "URL to redirect to",
								"schema": {
									"type": "string",
									"example": "/users/profile"
								}
							}
						}
					},
					"400": {
						"description": "Bad request if credentials are missing or invalid"
					}
				}
			}
		},
		"/logout": {
			"get": {
				"tags": ["Authentication"],
				"summary": "Log out user",
				"description": "Logs out the current user and redirects to the user profile page.",
				"responses": {
					"302": {
						"description": "Redirect to the user profile page after logout",
						"headers": {
							"Location": {
								"description": "URL to redirect to",
								"schema": {
									"type": "string",
									"example": "/users/profile"
								}
							}
						}
					}
				}
			}
		},
		"/authenticated": {
			"get": {
				"tags": ["Authentication"],
				"summary": "Check if user is authenticated",
				"description": "Checks if the current session is authenticated and returns session details if true.",
				"responses": {
					"200": {
						"description": "User is authenticated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SessionDetails"
								}
							}
						}
					},
					"401": {
						"description": "User is not authenticated",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "UNAUTHORIZED"
										},
										"message": {
											"type": "string",
											"example": "User is not authenticated."
										}
									}
								}
							}
						}
					}
				}
			}
		},

		"/streams": {
			"get": {
				"tags": ["Stream"],
				"summary": "List all streams",
				"description": "Retrieves all streams from the database.",
				"responses": {
					"200": {
						"description": "A list of all streams",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Stream"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad request due to database query error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": ["Stream"],
				"summary": "Create a new stream",
				"description": "Creates a new stream with the provided name, description, and associated username.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"username": {
										"type": "string"
									},
									"description": {
										"type": "string"
									}
								},
								"required": ["name", "username", "description"]
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Stream created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Stream"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"400": {
						"description": "Invalid input, object invalid",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/streams/{id}": {
			"get": {
				"tags": ["Stream"],
				"summary": "Get stream by ID",
				"description": "Retrieves a single stream by its unique ID.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Stream data retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Stream"
								}
							}
						}
					},
					"404": {
						"description": "Stream not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Stream"],
				"summary": "Update stream by ID",
				"description": "Updates the details of an existing stream by its ID.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"description": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "Stream updated successfully"
					},
					"404": {
						"description": "Stream not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"400": {
						"description": "Invalid request due to input error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/streams/{streamPath}": {
			"delete": {
				"tags": ["Stream"],
				"summary": "Delete a stream",
				"description": "Deletes a stream based on the provided path parameter.",
				"parameters": [
					{
						"name": "streamPath",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Stream deleted successfully"
					},
					"404": {
						"description": "Stream not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"400": {
						"description": "Invalid stream path provided",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/streams/{streamPath}/exists": {
			"get": {
				"tags": ["Stream"],
				"summary": "Check if a stream source exists",
				"description": "Checks if the stream source exists for the given stream path.",
				"parameters": [
					{
						"name": "streamPath",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Stream source existence confirmed",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"404": {
						"description": "Stream not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/streams/{streamPath}/end": {
			"put": {
				"tags": ["Stream"],
				"summary": "End a stream",
				"description": "Marks a stream as ended based on the provided stream path.",
				"parameters": [
					{
						"name": "streamPath",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Stream ended successfully"
					},
					"404": {
						"description": "Stream not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"400": {
						"description": "Invalid stream path provided",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/streams/{streamPath}/messages": {
			"get": {
				"tags": ["Stream"],
				"summary": "Get messages for a stream",
				"description": "Retrieves messages associated with a specific stream path.",
				"parameters": [
					{
						"name": "streamPath",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Messages retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Message"
									}
								}
							}
						}
					},
					"404": {
						"description": "Stream not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},

		"/password": {
			"put": {
				"tags": ["Authentication"],
				"summary": "Change user password",
				"description": "Allows a user to change their password by providing their username, old password, and new password.",
				"operationId": "changePassword",
				"requestBody": {
					"description": "User's credentials and new password",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"username": {
										"type": "string",
										"description": "User's username"
									},
									"oldPassword": {
										"type": "string",
										"description": "User's current password"
									},
									"newPassword": {
										"type": "string",
										"description": "User's new password"
									}
								},
								"required": [
									"username",
									"oldPassword",
									"newPassword"
								]
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "Password changed successfully"
					},
					"400": {
						"description": "Bad request due to invalid input or wrong old password",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"500": {
						"description": "Server error during database operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},

		"/messages": {
			"post": {
				"tags": ["Message"],
				"summary": "Create a message",
				"description": "Creates a new message associated with a specific stream and user.",
				"operationId": "createMessage",
				"requestBody": {
					"description": "Data needed to create a new message",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"content": {
										"type": "string",
										"description": "Content of the message"
									},
									"streamKey": {
										"type": "string",
										"description": "Key of the stream associated with this message"
									},
									"username": {
										"type": "string",
										"description": "Username of the user creating the message"
									}
								},
								"required": ["content", "streamKey"]
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Message created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Message"
								}
							}
						}
					},
					"400": {
						"description": "Bad request if content is empty or stream not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"404": {
						"description": "Stream not found for the given stream key",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/messages/{id}": {
			"patch": {
				"tags": ["Message"],
				"summary": "Answer a message",
				"description": "Updates the answered status of a message by its ID.",
				"operationId": "answerMessage",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Data needed to answer a message",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"answered": {
										"type": "boolean",
										"description": "The new answered status of the message"
									}
								},
								"required": ["answered"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Message updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Message"
								}
							}
						}
					},
					"400": {
						"description": "Bad request if input is invalid",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"404": {
						"description": "Message not found for the given ID",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["Message"],
				"summary": "Delete a message",
				"description": "Deletes a message by its ID.",
				"operationId": "deleteMessage",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Message deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"type": "boolean",
											"example": true
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad request if the ID is invalid",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"404": {
						"description": "Message not found for the given ID",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},

		"*": {
			"get": {
				"summary": "Handle wildcard route",
				"description": "Endpoint to handle all undefined routes",
				"operationId": "handleWildcardRoute",
				"responses": {
					"404": {
						"description": "Path not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"User": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid"
					},
					"username": {
						"type": "string"
					},
					"email": {
						"type": "string",
						"format": "email"
					},
					"picture": {
						"type": "string",
						"nullable": true
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"streamKey": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"id",
					"username",
					"email",
					"createdAt",
					"updatedAt"
				]
			},
			"UserInput": {
				"type": "object",
				"properties": {
					"username": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": ["username", "email", "password"]
			},
			"Error": {
				"type": "object",
				"properties": {
					"status": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				}
			},
			"Message": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid"
					},
					"content": {
						"type": "string"
					},
					"answered": {
						"type": "boolean"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"username": {
						"type": "string"
					},
					"streamKey": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"content",
					"streamKey",
					"username",
					"createdAt"
				]
			},
			"Stream": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid"
					},
					"name": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"maxCount": {
						"type": "integer"
					},
					"ended": {
						"type": "boolean"
					},
					"description": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": ["id", "name", "createdAt", "updatedAt"]
			}
		}
	}
}
